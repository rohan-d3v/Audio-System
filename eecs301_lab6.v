
// The top-level Verilog file for eecs301_lab6
// This code was initially generated by Terasic System Builder

module eecs301_lab6(

         //////////// ADC //////////
         output ADC_CONVST,
         output ADC_DIN,
         input ADC_DOUT,
         output ADC_SCLK,

         //////////// CLOCK //////////
         input CLOCK_50,
         input CLOCK2_50,
         input CLOCK3_50,
         input CLOCK4_50,

         //////////// SEG7 //////////
         output [ 6: 0 ] HEX0,
         output [ 6: 0 ] HEX1,
         output [ 6: 0 ] HEX2,
         output [ 6: 0 ] HEX3,
         output [ 6: 0 ] HEX4,
         output [ 6: 0 ] HEX5,

         //////////// KEY //////////
         input [ 3: 0 ] KEY,

         //////////// LED //////////
         output [ 9: 0 ] LEDR,

         //////////// SW //////////
         input [ 9: 0 ] SW,

         //////////// VGA //////////
         output [ 7: 0 ] VGA_B,
         output VGA_BLANK_N,
         output VGA_CLK,
         output [ 7: 0 ] VGA_G,
         output VGA_HS,
         output [ 7: 0 ] VGA_R,
         output VGA_SYNC_N,
         output VGA_VS,

         //////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
         inout [ 35: 0 ] GPIO_0,

         //////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
         inout [ 35: 0 ] GPIO_1
       );

//=======================================================
//  REG/WIRE declarations
//=======================================================
wire clk, pll;//clock

wire din, dcs, dout, valid, vhigh, vlow, ain, sync;//adc/dac

wire ena, enb;//enable

wire [1:0] motor;//motor/pwm
wire [11:0] pwm;
//LCD
wire hsync, vsync, hvalid, vvalid;
wire [7:0] red, green, blue;
wire [8:0] line;
wire [9:0] pxl;
//Sign/Unsign
wire rdata, data, ldata, hdata, lunsign, hunsign;
//peak detector
wire [8:0] plow, phigh;
//RAM read/write
wire en;
wire [8:0] read, write;
wire [11:0] hread, lread;

//Assignments
assign GPIO_0[13] = clk;	
assign GPIO_0[14] = din;	
assign out_7928 = GPIO_0[15];	
assign GPIO_0[17] = dcs;	
assign GPIO_0[8] = clk;	
assign GPIO_0[9] = ain;  
assign GPIO_0[10] = sync;	
assign GPIO_0[11] = 0;			
assign GPIO_0[12] = 1;			
assign {GPIO_0[3], GPIO_0[1]} = motor;
assign GPIO_0[4] = SW[1];	
assign {enb, ena} = GPIO_0[7:6];
assign GPIO_1[28] = pll;
assign GPIO_1[29] = SW[0];	
assign GPIO_1[30] = hsync;	
assign GPIO_1[31] = vsync;	
assign {GPIO_1[9:3], GPIO_1[1]} = red;								
assign {GPIO_1[19], GPIO_1[17], GPIO_1[15:10]} = green;		
assign GPIO_1[27:20] = blue;											
//=======================================================
//  Structural coding
//=======================================================
slclk(
		.clk(CLOCK_50), 
		.slclk(clk)
		);
	
pll clk9(
		.refclk(CLOCK_50),
		.rst(0),
		.outclk_0(pll)
		);
digital adcin(
				.clk(clk),
				.din(dout),
				.dout(din),
				.res(rdata),
				.cs(dcs),
				.valid(valid)
				);
convunsign conversion(
							.in(rdata),
							.out(data)
							);
assign hdata = data;
assign vhigh = hvalid;
assign ldata = data;
assign vlow = lvalid;

convsign convert(
					.in(hdata),
					.out(hunsign)
					);

analog dacout(
					.clk(clk),
					.valid(hvalid),
					.din(hunsign),
					.dout(ain),
					.sync(sync)
					);
					
pwmmod(
		.in(lvalid),
		.cycle(hunsign),
		.pwmmod(pwm)
		);
		
pwm(
	.clk(clk),
	.in(pwm),
	.signal(motor)
	);

vsync vgen(
			.hsync(hsync),
			.vsync(vsync),
			.line(vvalid),
			.cntline(line)
			);

hsync hgen(
	.clk(pll),
	.line(vvalid),
	.hsync(hsync),
	.out(hvalid),
	.pxl(pxl)
	);
	
detector high(
		.clk(pll),
		.valid(vhigh),
		.data(hunsign),
		.peak(phigh)
		);
	
detector low(
				.clk(pll),
				.valid(vlow),
				.data(lunsign),
				.peak(plow)
				);
		
ram control(
				.clk(pll),
				.pxl(cnt_px),
				.line(cnt_line),
				.write(write),
				.en(en)
				);

dualram rhigh(
				.clk(pll),
				.en(en),
				.data(phigh),
				.writein(write),
				.readin(read),
				.readout(hread)
				);
	
dualram rlow(
				.clk(pll),
				.en(en),
				.data(plow),
				.writein(write),
				.readin(read),
				.readout(lread)
				);

lcd display(
				.clk(pll),
				.high(hread),
				.low(lread),
				.addr(write),
				.valid(hvalid),
				.line(line),
				.pxl(pxl),
				.red(red),
				.green(green),
				.blue(blue),
				.read(read)
				);
endmodule
